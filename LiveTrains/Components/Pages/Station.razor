@rendermode InteractiveServer
@page "/"
@page "/{CRS}"
@using System.ComponentModel.DataAnnotations
@using LiveTrains.Components.Components
@using LiveTrains.Models
@using LiveTrains.Services
@inject RailDataService RailDataService
@inject NavigationManager NavigationManager
@inject ModalService ModalService

@if (DepartureBoard == null)
{
    <PageTitle>Loading...</PageTitle>
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <PageTitle>LiveTrains - @DepartureBoard.StationName (@DepartureBoard.StationCode)</PageTitle>
    <h1>@DepartureBoard.StationName (@DepartureBoard.StationCode)</h1>

    @if (DepartureBoard.StationMessages != null)
    {
        <Callout Type="CalloutType.Info" Color="CalloutColor.Info" Heading="Station Notices">
            <ul>
                @foreach (var message in DepartureBoard.StationMessages)
                {
                    <li>
                        @((MarkupString)message.Value)
                    </li>
                }
            </ul>
        </Callout>
    }

    @if (DepartureBoard.TrainServices is null)
    {
        <div class="alert alert-warning" role="alert">
            There are currently no services from this station.
        </div>
    }
    else
    {
        @foreach (var service in DepartureBoard.TrainServices)
        {
            <div class="service">
                <ServiceComponent Service="@service"/>
            </div>
        }
    }

    <em>Last updated at: @DepartureBoard.GeneratedAt.ToShortTimeString()</em>
}

@code {

    [Parameter] [MaxLength(3)] public string? CRS { get; set; }

    private DepartureBoard? DepartureBoard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(CRS))
        {
            DepartureBoard = await RailDataService.GetDepartureBoardWithDetailsAsync(CRS);
        }
        else
        {
            NavigationManager.NavigateTo("/LST");
        }
    }

}